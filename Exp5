clc; clear; close all;

% ---- Continuous Time Part ----
% Define parameters
tmin = 0; 
tmax = 10; 
dt = 0.01; 
t = tmin:dt:tmax; % Time vector

% Define signals
x1 = t .* (t >= 0);            % Ramp signal x1(t)
x2 = exp(-4*t) .* (t >= 0);     % Exponentially decaying signal x2(t)

% Convolution
x3 = conv(x1, x2) * dt;         % Important: multiply by dt for continuous-time convolution
n3 = length(x3);
t1 = (0:n3-1) * dt;             % New time vector after convolution

% Plot x1(t)
figure;
subplot(3,1,1);
plot(t, x1);
xlabel('t'); ylabel('x1(t)');
title('Signal x1(t)');

% Plot x2(t)
subplot(3,1,2);
plot(t, x2);
xlabel('t'); ylabel('x2(t)');
title('Signal x2(t)');

% Plot x3(t) = x1(t) * x2(t)
subplot(3,1,3);
plot(t1, x3);
xlabel('t'); ylabel('x3(t)');
title('Signal x3(t) = x1(t) * x2(t)');
xlim([0 6]); % Optional: for better visibility

% ---- Discrete Time Part ----
% Define signals
t_x = 0:7;
x = [2,1,1,1,1,1,1,0.5];

t_y = 0:13;
y = [2,0,1,0,1,0,1,0,1,0,1,0,1,0.5];

% 1. Plot x[n]
figure;
subplot(3,3,1);
stem(t_x, x, 'filled');
xlabel('n'); title('x[n]');

% 2. Plot y[n]
subplot(3,3,2);
stem(t_y, y, 'filled');
xlabel('n'); title('y[n]');

% 3. Plot x[2n] (Downsampling)
x_2n = x(1:2:end);
t_x2n = 0:1:length(x_2n)-1;
subplot(3,3,3);
stem(t_x2n, x_2n, 'filled');
xlabel('n'); title('x[2n]');

% 4. Plot x[n/2] (Upsampling)
x_n2 = zeros(1, 2*length(x)-1);
x_n2(1:2:end) = x;
t_xn2 = 0:length(x_n2)-1;
subplot(3,3,4);
stem(t_xn2, x_n2, 'filled');
xlabel('n'); title('x[n/2]');

% 5. Plot x[n-2] (Right Shift by 2)
t_xn_2 = 2:9;
x_n_2 = x;
subplot(3,3,5);
stem(t_xn_2, x_n_2, 'filled');
xlabel('n'); title('x[n-2]');

% 6. Plot y[n-2] (Right Shift by 2)
t_yn_2 = 2:15;
y_n_2 = y;
subplot(3,3,6);
stem(t_yn_2, y_n_2, 'filled');
xlabel('n'); title('y[n-2]');

% 7. Plot x[n-2] + y[n-2] (Addition after shifting)
x_n2_expanded = [x, zeros(1, length(y)-length(x))]; % Expand x to match y
sum_xy = x_n2_expanded + y;
subplot(3,3,7);
stem(t_yn_2, sum_xy, 'filled');
xlabel('n'); title('x[n-2] + y[n-2]');

% 8. Plot x[n] * y[n] (Multiplication without shifting)
x_expanded = [x, zeros(1, length(y)-length(x))]; % Expand x to match y
prod_xy = x_expanded .* y;
t_prod = 0:length(prod_xy)-1;
subplot(3,3,8);
stem(t_prod, prod_xy, 'filled');
xlabel('n'); title('x[n] * y[n]');

% 9. Plot y[1-n] (Time reversal)
y_reversed = fliplr(y);
t_rev = -length(y)+1:0;  % From -(N-1) to 0
subplot(3,3,9);
stem(t_rev, y_reversed, 'filled');
xlabel('n'); title('y[1-n]');
